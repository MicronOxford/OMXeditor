# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _fftw3
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


FFTW_R2HC = _fftw3.FFTW_R2HC
FFTW_HC2R = _fftw3.FFTW_HC2R
FFTW_DHT = _fftw3.FFTW_DHT
FFTW_REDFT00 = _fftw3.FFTW_REDFT00
FFTW_REDFT01 = _fftw3.FFTW_REDFT01
FFTW_REDFT10 = _fftw3.FFTW_REDFT10
FFTW_REDFT11 = _fftw3.FFTW_REDFT11
FFTW_RODFT00 = _fftw3.FFTW_RODFT00
FFTW_RODFT01 = _fftw3.FFTW_RODFT01
FFTW_RODFT10 = _fftw3.FFTW_RODFT10
FFTW_RODFT11 = _fftw3.FFTW_RODFT11
class fftw_iodim_do_not_use_me(_object):
    """Proxy of C++ fftw_iodim_do_not_use_me class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fftw_iodim_do_not_use_me, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fftw_iodim_do_not_use_me, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _fftw3.fftw_iodim_do_not_use_me_n_set
    __swig_getmethods__["n"] = _fftw3.fftw_iodim_do_not_use_me_n_get
    if _newclass:n = _swig_property(_fftw3.fftw_iodim_do_not_use_me_n_get, _fftw3.fftw_iodim_do_not_use_me_n_set)
    __swig_setmethods__["_is"] = _fftw3.fftw_iodim_do_not_use_me__is_set
    __swig_getmethods__["_is"] = _fftw3.fftw_iodim_do_not_use_me__is_get
    if _newclass:_is = _swig_property(_fftw3.fftw_iodim_do_not_use_me__is_get, _fftw3.fftw_iodim_do_not_use_me__is_set)
    __swig_setmethods__["os"] = _fftw3.fftw_iodim_do_not_use_me_os_set
    __swig_getmethods__["os"] = _fftw3.fftw_iodim_do_not_use_me_os_get
    if _newclass:os = _swig_property(_fftw3.fftw_iodim_do_not_use_me_os_get, _fftw3.fftw_iodim_do_not_use_me_os_set)
    def __init__(self, *args): 
        """__init__(self) -> fftw_iodim_do_not_use_me"""
        this = _fftw3.new_fftw_iodim_do_not_use_me(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fftw3.delete_fftw_iodim_do_not_use_me
    __del__ = lambda self : None;
fftw_iodim_do_not_use_me_swigregister = _fftw3.fftw_iodim_do_not_use_me_swigregister
fftw_iodim_do_not_use_me_swigregister(fftw_iodim_do_not_use_me)


def fftwf_execute(*args):
  """fftwf_execute(fftwf_plan p)"""
  return _fftw3.fftwf_execute(*args)

def fftwf_plan_dft(*args):
  """
    fftwf_plan_dft(int rank, int n, fftwf_complex in, fftwf_complex out, 
        int sign, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_dft(*args)

def fftwf_plan_dft_1d(*args):
  """
    fftwf_plan_dft_1d(int n, fftwf_complex in, fftwf_complex out, int sign, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_dft_1d(*args)

def fftwf_plan_dft_2d(*args):
  """
    fftwf_plan_dft_2d(int nx, int ny, fftwf_complex in, fftwf_complex out, 
        int sign, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_dft_2d(*args)

def fftwf_plan_dft_3d(*args):
  """
    fftwf_plan_dft_3d(int nx, int ny, int nz, fftwf_complex in, fftwf_complex out, 
        int sign, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_dft_3d(*args)

def fftwf_plan_many_dft(*args):
  """
    fftwf_plan_many_dft(int rank, int n, int howmany, fftwf_complex in, int inembed, 
        int istride, int idist, fftwf_complex out, 
        int onembed, int ostride, int odist, 
        int sign, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_many_dft(*args)

def fftwf_plan_guru_dft(*args):
  """
    fftwf_plan_guru_dft(int rank, fftwf_iodim dims, int howmany_rank, fftwf_iodim howmany_dims, 
        fftwf_complex in, fftwf_complex out, 
        int sign, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_guru_dft(*args)

def fftwf_plan_guru_split_dft(*args):
  """
    fftwf_plan_guru_split_dft(int rank, fftwf_iodim dims, int howmany_rank, fftwf_iodim howmany_dims, 
        float ri, float ii, float ro, 
        float io, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_guru_split_dft(*args)

def fftwf_execute_dft(*args):
  """fftwf_execute_dft(fftwf_plan p, fftwf_complex in, fftwf_complex out)"""
  return _fftw3.fftwf_execute_dft(*args)

def fftwf_execute_split_dft(*args):
  """fftwf_execute_split_dft(fftwf_plan p, float ri, float ii, float ro, float io)"""
  return _fftw3.fftwf_execute_split_dft(*args)

def fftwf_plan_many_dft_r2c(*args):
  """
    fftwf_plan_many_dft_r2c(int rank, int n, int howmany, float in, int inembed, 
        int istride, int idist, fftwf_complex out, 
        int onembed, int ostride, int odist, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_many_dft_r2c(*args)

def fftwf_plan_dft_r2c(*args):
  """fftwf_plan_dft_r2c(int rank, int n, float in, fftwf_complex out, unsigned int flags) -> fftwf_plan"""
  return _fftw3.fftwf_plan_dft_r2c(*args)

def fftwf_plan_dft_r2c_1d(*args):
  """fftwf_plan_dft_r2c_1d(int n, float in, fftwf_complex out, unsigned int flags) -> fftwf_plan"""
  return _fftw3.fftwf_plan_dft_r2c_1d(*args)

def fftwf_plan_dft_r2c_2d(*args):
  """fftwf_plan_dft_r2c_2d(int nx, int ny, float in, fftwf_complex out, unsigned int flags) -> fftwf_plan"""
  return _fftw3.fftwf_plan_dft_r2c_2d(*args)

def fftwf_plan_dft_r2c_3d(*args):
  """
    fftwf_plan_dft_r2c_3d(int nx, int ny, int nz, float in, fftwf_complex out, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_dft_r2c_3d(*args)

def fftwf_plan_many_dft_c2r(*args):
  """
    fftwf_plan_many_dft_c2r(int rank, int n, int howmany, fftwf_complex in, int inembed, 
        int istride, int idist, float out, 
        int onembed, int ostride, int odist, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_many_dft_c2r(*args)

def fftwf_plan_dft_c2r(*args):
  """fftwf_plan_dft_c2r(int rank, int n, fftwf_complex in, float out, unsigned int flags) -> fftwf_plan"""
  return _fftw3.fftwf_plan_dft_c2r(*args)

def fftwf_plan_dft_c2r_1d(*args):
  """fftwf_plan_dft_c2r_1d(int n, fftwf_complex in, float out, unsigned int flags) -> fftwf_plan"""
  return _fftw3.fftwf_plan_dft_c2r_1d(*args)

def fftwf_plan_dft_c2r_2d(*args):
  """fftwf_plan_dft_c2r_2d(int nx, int ny, fftwf_complex in, float out, unsigned int flags) -> fftwf_plan"""
  return _fftw3.fftwf_plan_dft_c2r_2d(*args)

def fftwf_plan_dft_c2r_3d(*args):
  """
    fftwf_plan_dft_c2r_3d(int nx, int ny, int nz, fftwf_complex in, float out, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_dft_c2r_3d(*args)

def fftwf_plan_guru_dft_r2c(*args):
  """
    fftwf_plan_guru_dft_r2c(int rank, fftwf_iodim dims, int howmany_rank, fftwf_iodim howmany_dims, 
        float in, fftwf_complex out, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_guru_dft_r2c(*args)

def fftwf_plan_guru_dft_c2r(*args):
  """
    fftwf_plan_guru_dft_c2r(int rank, fftwf_iodim dims, int howmany_rank, fftwf_iodim howmany_dims, 
        fftwf_complex in, float out, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_guru_dft_c2r(*args)

def fftwf_plan_guru_split_dft_r2c(*args):
  """
    fftwf_plan_guru_split_dft_r2c(int rank, fftwf_iodim dims, int howmany_rank, fftwf_iodim howmany_dims, 
        float in, float ro, float io, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_guru_split_dft_r2c(*args)

def fftwf_plan_guru_split_dft_c2r(*args):
  """
    fftwf_plan_guru_split_dft_c2r(int rank, fftwf_iodim dims, int howmany_rank, fftwf_iodim howmany_dims, 
        float ri, float ii, float out, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_guru_split_dft_c2r(*args)

def fftwf_execute_dft_r2c(*args):
  """fftwf_execute_dft_r2c(fftwf_plan p, float in, fftwf_complex out)"""
  return _fftw3.fftwf_execute_dft_r2c(*args)

def fftwf_execute_dft_c2r(*args):
  """fftwf_execute_dft_c2r(fftwf_plan p, fftwf_complex in, float out)"""
  return _fftw3.fftwf_execute_dft_c2r(*args)

def fftwf_execute_split_dft_r2c(*args):
  """fftwf_execute_split_dft_r2c(fftwf_plan p, float in, float ro, float io)"""
  return _fftw3.fftwf_execute_split_dft_r2c(*args)

def fftwf_execute_split_dft_c2r(*args):
  """fftwf_execute_split_dft_c2r(fftwf_plan p, float ri, float ii, float out)"""
  return _fftw3.fftwf_execute_split_dft_c2r(*args)

def fftwf_plan_many_r2r(*args):
  """
    fftwf_plan_many_r2r(int rank, int n, int howmany, float in, int inembed, 
        int istride, int idist, float out, int onembed, 
        int ostride, int odist, fftwf_r2r_kind kind, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_many_r2r(*args)

def fftwf_plan_r2r(*args):
  """
    fftwf_plan_r2r(int rank, int n, float in, float out, fftwf_r2r_kind kind, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_r2r(*args)

def fftwf_plan_r2r_1d(*args):
  """fftwf_plan_r2r_1d(int n, float in, float out, fftwf_r2r_kind kind, unsigned int flags) -> fftwf_plan"""
  return _fftw3.fftwf_plan_r2r_1d(*args)

def fftwf_plan_r2r_2d(*args):
  """
    fftwf_plan_r2r_2d(int nx, int ny, float in, float out, fftwf_r2r_kind kindx, 
        fftwf_r2r_kind kindy, unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_r2r_2d(*args)

def fftwf_plan_r2r_3d(*args):
  """
    fftwf_plan_r2r_3d(int nx, int ny, int nz, float in, float out, fftwf_r2r_kind kindx, 
        fftwf_r2r_kind kindy, fftwf_r2r_kind kindz, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_r2r_3d(*args)

def fftwf_plan_guru_r2r(*args):
  """
    fftwf_plan_guru_r2r(int rank, fftwf_iodim dims, int howmany_rank, fftwf_iodim howmany_dims, 
        float in, float out, fftwf_r2r_kind kind, 
        unsigned int flags) -> fftwf_plan
    """
  return _fftw3.fftwf_plan_guru_r2r(*args)

def fftwf_execute_r2r(*args):
  """fftwf_execute_r2r(fftwf_plan p, float in, float out)"""
  return _fftw3.fftwf_execute_r2r(*args)

def fftwf_destroy_plan(*args):
  """fftwf_destroy_plan(fftwf_plan p)"""
  return _fftw3.fftwf_destroy_plan(*args)

def fftwf_forget_wisdom(*args):
  """fftwf_forget_wisdom()"""
  return _fftw3.fftwf_forget_wisdom(*args)

def fftwf_cleanup(*args):
  """fftwf_cleanup()"""
  return _fftw3.fftwf_cleanup(*args)

def fftwf_set_timelimit(*args):
  """fftwf_set_timelimit(double ?)"""
  return _fftw3.fftwf_set_timelimit(*args)

def fftwf_plan_with_nthreads(*args):
  """fftwf_plan_with_nthreads(int nthreads)"""
  return _fftw3.fftwf_plan_with_nthreads(*args)

def fftwf_init_threads(*args):
  """fftwf_init_threads() -> int"""
  return _fftw3.fftwf_init_threads(*args)

def fftwf_cleanup_threads(*args):
  """fftwf_cleanup_threads()"""
  return _fftw3.fftwf_cleanup_threads(*args)

def fftwf_export_wisdom_to_file(*args):
  """fftwf_export_wisdom_to_file(FILE output_file)"""
  return _fftw3.fftwf_export_wisdom_to_file(*args)

def fftwf_export_wisdom_to_string(*args):
  """fftwf_export_wisdom_to_string() -> char"""
  return _fftw3.fftwf_export_wisdom_to_string(*args)

def fftwf_export_wisdom(*args):
  """fftwf_export_wisdom(void write_char, void data)"""
  return _fftw3.fftwf_export_wisdom(*args)

def fftwf_import_system_wisdom(*args):
  """fftwf_import_system_wisdom() -> int"""
  return _fftw3.fftwf_import_system_wisdom(*args)

def fftwf_import_wisdom_from_file(*args):
  """fftwf_import_wisdom_from_file(FILE input_file) -> int"""
  return _fftw3.fftwf_import_wisdom_from_file(*args)

def fftwf_import_wisdom_from_string(*args):
  """fftwf_import_wisdom_from_string(char input_string) -> int"""
  return _fftw3.fftwf_import_wisdom_from_string(*args)

def fftwf_import_wisdom(*args):
  """fftwf_import_wisdom(int read_char, void data) -> int"""
  return _fftw3.fftwf_import_wisdom(*args)

def fftwf_fprint_plan(*args):
  """fftwf_fprint_plan(fftwf_plan p, FILE output_file)"""
  return _fftw3.fftwf_fprint_plan(*args)

def fftwf_print_plan(*args):
  """fftwf_print_plan(fftwf_plan p)"""
  return _fftw3.fftwf_print_plan(*args)

def fftwf_malloc(*args):
  """fftwf_malloc(size_t n) -> void"""
  return _fftw3.fftwf_malloc(*args)

def fftwf_free(*args):
  """fftwf_free(void p)"""
  return _fftw3.fftwf_free(*args)

def fftwf_flops(*args):
  """fftwf_flops(fftwf_plan p, double add, double mul, double fmas)"""
  return _fftw3.fftwf_flops(*args)

def fftwf_estimate_cost(*args):
  """fftwf_estimate_cost(fftwf_plan p) -> double"""
  return _fftw3.fftwf_estimate_cost(*args)

def fftw_execute(*args):
  """fftw_execute(fftw_plan p)"""
  return _fftw3.fftw_execute(*args)

def fftw_plan_dft(*args):
  """
    fftw_plan_dft(int rank, int n, fftw_complex in, fftw_complex out, 
        int sign, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_dft(*args)

def fftw_plan_dft_1d(*args):
  """
    fftw_plan_dft_1d(int n, fftw_complex in, fftw_complex out, int sign, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_dft_1d(*args)

def fftw_plan_dft_2d(*args):
  """
    fftw_plan_dft_2d(int nx, int ny, fftw_complex in, fftw_complex out, 
        int sign, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_dft_2d(*args)

def fftw_plan_dft_3d(*args):
  """
    fftw_plan_dft_3d(int nx, int ny, int nz, fftw_complex in, fftw_complex out, 
        int sign, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_dft_3d(*args)

def fftw_plan_many_dft(*args):
  """
    fftw_plan_many_dft(int rank, int n, int howmany, fftw_complex in, int inembed, 
        int istride, int idist, fftw_complex out, 
        int onembed, int ostride, int odist, int sign, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_many_dft(*args)

def fftw_plan_guru_dft(*args):
  """
    fftw_plan_guru_dft(int rank, fftw_iodim dims, int howmany_rank, fftw_iodim howmany_dims, 
        fftw_complex in, fftw_complex out, 
        int sign, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_guru_dft(*args)

def fftw_plan_guru_split_dft(*args):
  """
    fftw_plan_guru_split_dft(int rank, fftw_iodim dims, int howmany_rank, fftw_iodim howmany_dims, 
        double ri, double ii, double ro, 
        double io, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_guru_split_dft(*args)

def fftw_execute_dft(*args):
  """fftw_execute_dft(fftw_plan p, fftw_complex in, fftw_complex out)"""
  return _fftw3.fftw_execute_dft(*args)

def fftw_execute_split_dft(*args):
  """fftw_execute_split_dft(fftw_plan p, double ri, double ii, double ro, double io)"""
  return _fftw3.fftw_execute_split_dft(*args)

def fftw_plan_many_dft_r2c(*args):
  """
    fftw_plan_many_dft_r2c(int rank, int n, int howmany, double in, int inembed, 
        int istride, int idist, fftw_complex out, 
        int onembed, int ostride, int odist, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_many_dft_r2c(*args)

def fftw_plan_dft_r2c(*args):
  """fftw_plan_dft_r2c(int rank, int n, double in, fftw_complex out, unsigned int flags) -> fftw_plan"""
  return _fftw3.fftw_plan_dft_r2c(*args)

def fftw_plan_dft_r2c_1d(*args):
  """fftw_plan_dft_r2c_1d(int n, double in, fftw_complex out, unsigned int flags) -> fftw_plan"""
  return _fftw3.fftw_plan_dft_r2c_1d(*args)

def fftw_plan_dft_r2c_2d(*args):
  """fftw_plan_dft_r2c_2d(int nx, int ny, double in, fftw_complex out, unsigned int flags) -> fftw_plan"""
  return _fftw3.fftw_plan_dft_r2c_2d(*args)

def fftw_plan_dft_r2c_3d(*args):
  """
    fftw_plan_dft_r2c_3d(int nx, int ny, int nz, double in, fftw_complex out, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_dft_r2c_3d(*args)

def fftw_plan_many_dft_c2r(*args):
  """
    fftw_plan_many_dft_c2r(int rank, int n, int howmany, fftw_complex in, int inembed, 
        int istride, int idist, double out, 
        int onembed, int ostride, int odist, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_many_dft_c2r(*args)

def fftw_plan_dft_c2r(*args):
  """fftw_plan_dft_c2r(int rank, int n, fftw_complex in, double out, unsigned int flags) -> fftw_plan"""
  return _fftw3.fftw_plan_dft_c2r(*args)

def fftw_plan_dft_c2r_1d(*args):
  """fftw_plan_dft_c2r_1d(int n, fftw_complex in, double out, unsigned int flags) -> fftw_plan"""
  return _fftw3.fftw_plan_dft_c2r_1d(*args)

def fftw_plan_dft_c2r_2d(*args):
  """fftw_plan_dft_c2r_2d(int nx, int ny, fftw_complex in, double out, unsigned int flags) -> fftw_plan"""
  return _fftw3.fftw_plan_dft_c2r_2d(*args)

def fftw_plan_dft_c2r_3d(*args):
  """
    fftw_plan_dft_c2r_3d(int nx, int ny, int nz, fftw_complex in, double out, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_dft_c2r_3d(*args)

def fftw_plan_guru_dft_r2c(*args):
  """
    fftw_plan_guru_dft_r2c(int rank, fftw_iodim dims, int howmany_rank, fftw_iodim howmany_dims, 
        double in, fftw_complex out, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_guru_dft_r2c(*args)

def fftw_plan_guru_dft_c2r(*args):
  """
    fftw_plan_guru_dft_c2r(int rank, fftw_iodim dims, int howmany_rank, fftw_iodim howmany_dims, 
        fftw_complex in, double out, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_guru_dft_c2r(*args)

def fftw_plan_guru_split_dft_r2c(*args):
  """
    fftw_plan_guru_split_dft_r2c(int rank, fftw_iodim dims, int howmany_rank, fftw_iodim howmany_dims, 
        double in, double ro, double io, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_guru_split_dft_r2c(*args)

def fftw_plan_guru_split_dft_c2r(*args):
  """
    fftw_plan_guru_split_dft_c2r(int rank, fftw_iodim dims, int howmany_rank, fftw_iodim howmany_dims, 
        double ri, double ii, double out, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_guru_split_dft_c2r(*args)

def fftw_execute_dft_r2c(*args):
  """fftw_execute_dft_r2c(fftw_plan p, double in, fftw_complex out)"""
  return _fftw3.fftw_execute_dft_r2c(*args)

def fftw_execute_dft_c2r(*args):
  """fftw_execute_dft_c2r(fftw_plan p, fftw_complex in, double out)"""
  return _fftw3.fftw_execute_dft_c2r(*args)

def fftw_execute_split_dft_r2c(*args):
  """fftw_execute_split_dft_r2c(fftw_plan p, double in, double ro, double io)"""
  return _fftw3.fftw_execute_split_dft_r2c(*args)

def fftw_execute_split_dft_c2r(*args):
  """fftw_execute_split_dft_c2r(fftw_plan p, double ri, double ii, double out)"""
  return _fftw3.fftw_execute_split_dft_c2r(*args)

def fftw_plan_many_r2r(*args):
  """
    fftw_plan_many_r2r(int rank, int n, int howmany, double in, int inembed, 
        int istride, int idist, double out, int onembed, 
        int ostride, int odist, fftw_r2r_kind kind, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_many_r2r(*args)

def fftw_plan_r2r(*args):
  """
    fftw_plan_r2r(int rank, int n, double in, double out, fftw_r2r_kind kind, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_r2r(*args)

def fftw_plan_r2r_1d(*args):
  """fftw_plan_r2r_1d(int n, double in, double out, fftw_r2r_kind kind, unsigned int flags) -> fftw_plan"""
  return _fftw3.fftw_plan_r2r_1d(*args)

def fftw_plan_r2r_2d(*args):
  """
    fftw_plan_r2r_2d(int nx, int ny, double in, double out, fftw_r2r_kind kindx, 
        fftw_r2r_kind kindy, unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_r2r_2d(*args)

def fftw_plan_r2r_3d(*args):
  """
    fftw_plan_r2r_3d(int nx, int ny, int nz, double in, double out, fftw_r2r_kind kindx, 
        fftw_r2r_kind kindy, fftw_r2r_kind kindz, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_r2r_3d(*args)

def fftw_plan_guru_r2r(*args):
  """
    fftw_plan_guru_r2r(int rank, fftw_iodim dims, int howmany_rank, fftw_iodim howmany_dims, 
        double in, double out, fftw_r2r_kind kind, 
        unsigned int flags) -> fftw_plan
    """
  return _fftw3.fftw_plan_guru_r2r(*args)

def fftw_execute_r2r(*args):
  """fftw_execute_r2r(fftw_plan p, double in, double out)"""
  return _fftw3.fftw_execute_r2r(*args)

def fftw_destroy_plan(*args):
  """fftw_destroy_plan(fftw_plan p)"""
  return _fftw3.fftw_destroy_plan(*args)

def fftw_forget_wisdom(*args):
  """fftw_forget_wisdom()"""
  return _fftw3.fftw_forget_wisdom(*args)

def fftw_cleanup(*args):
  """fftw_cleanup()"""
  return _fftw3.fftw_cleanup(*args)

def fftw_set_timelimit(*args):
  """fftw_set_timelimit(double ?)"""
  return _fftw3.fftw_set_timelimit(*args)

def fftw_plan_with_nthreads(*args):
  """fftw_plan_with_nthreads(int nthreads)"""
  return _fftw3.fftw_plan_with_nthreads(*args)

def fftw_init_threads(*args):
  """fftw_init_threads() -> int"""
  return _fftw3.fftw_init_threads(*args)

def fftw_cleanup_threads(*args):
  """fftw_cleanup_threads()"""
  return _fftw3.fftw_cleanup_threads(*args)

def fftw_export_wisdom_to_file(*args):
  """fftw_export_wisdom_to_file(FILE output_file)"""
  return _fftw3.fftw_export_wisdom_to_file(*args)

def fftw_export_wisdom_to_string(*args):
  """fftw_export_wisdom_to_string() -> char"""
  return _fftw3.fftw_export_wisdom_to_string(*args)

def fftw_export_wisdom(*args):
  """fftw_export_wisdom(void write_char, void data)"""
  return _fftw3.fftw_export_wisdom(*args)

def fftw_import_system_wisdom(*args):
  """fftw_import_system_wisdom() -> int"""
  return _fftw3.fftw_import_system_wisdom(*args)

def fftw_import_wisdom_from_file(*args):
  """fftw_import_wisdom_from_file(FILE input_file) -> int"""
  return _fftw3.fftw_import_wisdom_from_file(*args)

def fftw_import_wisdom_from_string(*args):
  """fftw_import_wisdom_from_string(char input_string) -> int"""
  return _fftw3.fftw_import_wisdom_from_string(*args)

def fftw_import_wisdom(*args):
  """fftw_import_wisdom(int read_char, void data) -> int"""
  return _fftw3.fftw_import_wisdom(*args)

def fftw_fprint_plan(*args):
  """fftw_fprint_plan(fftw_plan p, FILE output_file)"""
  return _fftw3.fftw_fprint_plan(*args)

def fftw_print_plan(*args):
  """fftw_print_plan(fftw_plan p)"""
  return _fftw3.fftw_print_plan(*args)

def fftw_malloc(*args):
  """fftw_malloc(size_t n) -> void"""
  return _fftw3.fftw_malloc(*args)

def fftw_free(*args):
  """fftw_free(void p)"""
  return _fftw3.fftw_free(*args)

def fftw_flops(*args):
  """fftw_flops(fftw_plan p, double add, double mul, double fmas)"""
  return _fftw3.fftw_flops(*args)

def fftw_estimate_cost(*args):
  """fftw_estimate_cost(fftw_plan p) -> double"""
  return _fftw3.fftw_estimate_cost(*args)
FFTW_FORWARD = _fftw3.FFTW_FORWARD
FFTW_BACKWARD = _fftw3.FFTW_BACKWARD
FFTW_NO_TIMELIMIT = _fftw3.FFTW_NO_TIMELIMIT
FFTW_MEASURE = _fftw3.FFTW_MEASURE
FFTW_DESTROY_INPUT = _fftw3.FFTW_DESTROY_INPUT
FFTW_UNALIGNED = _fftw3.FFTW_UNALIGNED
FFTW_CONSERVE_MEMORY = _fftw3.FFTW_CONSERVE_MEMORY
FFTW_EXHAUSTIVE = _fftw3.FFTW_EXHAUSTIVE
FFTW_PRESERVE_INPUT = _fftw3.FFTW_PRESERVE_INPUT
FFTW_PATIENT = _fftw3.FFTW_PATIENT
FFTW_ESTIMATE = _fftw3.FFTW_ESTIMATE

v = _fftw3.v
fftwf_version = v.fftwf_version
fftwf_cc = v.fftwf_cc
fftwf_codelet_optim = v.fftwf_codelet_optim
fftw_version = v.fftw_version
fftw_cc = v.fftw_cc
fftw_codelet_optim = v.fftw_codelet_optim

